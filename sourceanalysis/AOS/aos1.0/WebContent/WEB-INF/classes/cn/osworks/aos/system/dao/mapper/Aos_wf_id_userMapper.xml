<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- aos_wf_id_user[aos_wf_id_user]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2015-12-22 22:10:32 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Aos_wf_id_userMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Aos_wf_id_userPO">
		INSERT INTO aos_wf_id_user (
		<if test="rev_ != null">
	         rev_, <!-- rev_ -->
		</if>
		<if test="first_ != null and first_ != ''">
	         first_, <!-- first_ -->
		</if>
		<if test="last_ != null and last_ != ''">
	         last_, <!-- last_ -->
		</if>
		<if test="email_ != null and email_ != ''">
	         email_, <!-- email_ -->
		</if>
		<if test="pwd_ != null and pwd_ != ''">
	         pwd_, <!-- pwd_ -->
		</if>
		<if test="picture_id_ != null and picture_id_ != ''">
	         picture_id_, <!-- picture_id_ -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- id_ -->
	   </if>
		)VALUES(
		<if test="rev_ != null">
	          #{rev_, jdbcType=INTEGER}, <!-- rev_ -->
	    </if>
		<if test="first_ != null and first_ != ''">
	          #{first_, jdbcType=VARCHAR}, <!-- first_ -->
	    </if>
		<if test="last_ != null and last_ != ''">
	          #{last_, jdbcType=VARCHAR}, <!-- last_ -->
	    </if>
		<if test="email_ != null and email_ != ''">
	          #{email_, jdbcType=VARCHAR}, <!-- email_ -->
	    </if>
		<if test="pwd_ != null and pwd_ != ''">
	          #{pwd_, jdbcType=VARCHAR}, <!-- pwd_ -->
	    </if>
		<if test="picture_id_ != null and picture_id_ != ''">
	          #{picture_id_, jdbcType=VARCHAR}, <!-- picture_id_ -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- id_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Aos_wf_id_userPO">
		INSERT INTO aos_wf_id_user (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- id_ -->
		    #{rev_, jdbcType=INTEGER},  <!-- rev_ -->
		    #{first_, jdbcType=VARCHAR},  <!-- first_ -->
		    #{last_, jdbcType=VARCHAR},  <!-- last_ -->
		    #{email_, jdbcType=VARCHAR},  <!-- email_ -->
		    #{pwd_, jdbcType=VARCHAR},  <!-- pwd_ -->
		    #{picture_id_, jdbcType=VARCHAR}  <!-- picture_id_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Aos_wf_id_userPO">
		UPDATE aos_wf_id_user
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- id_ -->
			</if>
			<if test="rev_ != null">
		          rev_ = #{rev_, jdbcType=INTEGER},  <!-- rev_ -->
			</if>
			<if test="first_ != null">
		          first_ = #{first_, jdbcType=VARCHAR},  <!-- first_ -->
			</if>
			<if test="last_ != null">
		          last_ = #{last_, jdbcType=VARCHAR},  <!-- last_ -->
			</if>
			<if test="email_ != null">
		          email_ = #{email_, jdbcType=VARCHAR},  <!-- email_ -->
			</if>
			<if test="pwd_ != null">
		          pwd_ = #{pwd_, jdbcType=VARCHAR},  <!-- pwd_ -->
			</if>
			<if test="picture_id_ != null">
		          picture_id_ = #{picture_id_, jdbcType=VARCHAR},  <!-- picture_id_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM aos_wf_id_user WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Aos_wf_id_userPO">
		SELECT
		<include refid="column" />
		FROM aos_wf_id_user WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Aos_wf_id_userPO">
		SELECT
		    <include refid="column" />
		FROM aos_wf_id_user
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Aos_wf_id_userPO">
		SELECT
			<include refid="column" />	
		FROM aos_wf_id_user
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Aos_wf_id_userPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_wf_id_user
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Aos_wf_id_userPO">
		SELECT
			<include refid="column" />	
		FROM aos_wf_id_user
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Aos_wf_id_userPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_wf_id_user
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM aos_wf_id_user
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM aos_wf_id_user
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  rev_,  <!-- rev_ -->
		  first_,  <!-- first_ -->
		  last_,  <!-- last_ -->
		  email_,  <!-- email_ -->
		  pwd_,  <!-- pwd_ -->
		  picture_id_  <!-- picture_id_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  aos_wf_id_user.id_,  <!-- id_ -->
		  aos_wf_id_user.rev_,  <!-- rev_ -->
		  aos_wf_id_user.first_,  <!-- first_ -->
		  aos_wf_id_user.last_,  <!-- last_ -->
		  aos_wf_id_user.email_,  <!-- email_ -->
		  aos_wf_id_user.pwd_,  <!-- pwd_ -->
		  aos_wf_id_user.picture_id_  <!-- picture_id_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	   <if test="rev_ != null ">
		      AND rev_ = #{rev_}  <!-- rev_ -->
		</if>
	    <if test="first_ != null and first_ != ''">
		      AND first_ = #{first_}  <!-- first_ -->
		</if>
	    <if test="last_ != null and last_ != ''">
		      AND last_ = #{last_}  <!-- last_ -->
		</if>
	    <if test="email_ != null and email_ != ''">
		      AND email_ = #{email_}  <!-- email_ -->
		</if>
	    <if test="pwd_ != null and pwd_ != ''">
		      AND pwd_ = #{pwd_}  <!-- pwd_ -->
		</if>
	    <if test="picture_id_ != null and picture_id_ != ''">
		      AND picture_id_ = #{picture_id_}  <!-- picture_id_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- id_ -->
		</if>
	    <if test="first_ != null and first_ != ''">
		      AND first_ like '%${first_}%'  <!-- first_ -->
		</if>
	    <if test="last_ != null and last_ != ''">
		      AND last_ like '%${last_}%'  <!-- last_ -->
		</if>
	    <if test="email_ != null and email_ != ''">
		      AND email_ like '%${email_}%'  <!-- email_ -->
		</if>
	    <if test="pwd_ != null and pwd_ != ''">
		      AND pwd_ like '%${pwd_}%'  <!-- pwd_ -->
		</if>
	    <if test="picture_id_ != null and picture_id_ != ''">
		      AND picture_id_ like '%${picture_id_}%'  <!-- picture_id_ -->
		</if>
	</sql>
	
</mapper>
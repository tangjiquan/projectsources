<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- aos_wf_hi_identitylink[aos_wf_hi_identitylink]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2015-12-22 22:10:32 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Aos_wf_hi_identitylinkMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Aos_wf_hi_identitylinkPO">
		INSERT INTO aos_wf_hi_identitylink (
		<if test="group_id_ != null and group_id_ != ''">
	         group_id_, <!-- group_id_ -->
		</if>
		<if test="type_ != null and type_ != ''">
	         type_, <!-- type_ -->
		</if>
		<if test="user_id_ != null and user_id_ != ''">
	         user_id_, <!-- user_id_ -->
		</if>
		<if test="task_id_ != null and task_id_ != ''">
	         task_id_, <!-- task_id_ -->
		</if>
		<if test="proc_inst_id_ != null and proc_inst_id_ != ''">
	         proc_inst_id_, <!-- proc_inst_id_ -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- id_ -->
	   </if>
		)VALUES(
		<if test="group_id_ != null and group_id_ != ''">
	          #{group_id_, jdbcType=VARCHAR}, <!-- group_id_ -->
	    </if>
		<if test="type_ != null and type_ != ''">
	          #{type_, jdbcType=VARCHAR}, <!-- type_ -->
	    </if>
		<if test="user_id_ != null and user_id_ != ''">
	          #{user_id_, jdbcType=VARCHAR}, <!-- user_id_ -->
	    </if>
		<if test="task_id_ != null and task_id_ != ''">
	          #{task_id_, jdbcType=VARCHAR}, <!-- task_id_ -->
	    </if>
		<if test="proc_inst_id_ != null and proc_inst_id_ != ''">
	          #{proc_inst_id_, jdbcType=VARCHAR}, <!-- proc_inst_id_ -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- id_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Aos_wf_hi_identitylinkPO">
		INSERT INTO aos_wf_hi_identitylink (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- id_ -->
		    #{group_id_, jdbcType=VARCHAR},  <!-- group_id_ -->
		    #{type_, jdbcType=VARCHAR},  <!-- type_ -->
		    #{user_id_, jdbcType=VARCHAR},  <!-- user_id_ -->
		    #{task_id_, jdbcType=VARCHAR},  <!-- task_id_ -->
		    #{proc_inst_id_, jdbcType=VARCHAR}  <!-- proc_inst_id_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Aos_wf_hi_identitylinkPO">
		UPDATE aos_wf_hi_identitylink
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- id_ -->
			</if>
			<if test="group_id_ != null">
		          group_id_ = #{group_id_, jdbcType=VARCHAR},  <!-- group_id_ -->
			</if>
			<if test="type_ != null">
		          type_ = #{type_, jdbcType=VARCHAR},  <!-- type_ -->
			</if>
			<if test="user_id_ != null">
		          user_id_ = #{user_id_, jdbcType=VARCHAR},  <!-- user_id_ -->
			</if>
			<if test="task_id_ != null">
		          task_id_ = #{task_id_, jdbcType=VARCHAR},  <!-- task_id_ -->
			</if>
			<if test="proc_inst_id_ != null">
		          proc_inst_id_ = #{proc_inst_id_, jdbcType=VARCHAR},  <!-- proc_inst_id_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM aos_wf_hi_identitylink WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Aos_wf_hi_identitylinkPO">
		SELECT
		<include refid="column" />
		FROM aos_wf_hi_identitylink WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Aos_wf_hi_identitylinkPO">
		SELECT
		    <include refid="column" />
		FROM aos_wf_hi_identitylink
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Aos_wf_hi_identitylinkPO">
		SELECT
			<include refid="column" />	
		FROM aos_wf_hi_identitylink
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Aos_wf_hi_identitylinkPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_wf_hi_identitylink
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Aos_wf_hi_identitylinkPO">
		SELECT
			<include refid="column" />	
		FROM aos_wf_hi_identitylink
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Aos_wf_hi_identitylinkPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM aos_wf_hi_identitylink
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM aos_wf_hi_identitylink
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM aos_wf_hi_identitylink
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  group_id_,  <!-- group_id_ -->
		  type_,  <!-- type_ -->
		  user_id_,  <!-- user_id_ -->
		  task_id_,  <!-- task_id_ -->
		  proc_inst_id_  <!-- proc_inst_id_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  aos_wf_hi_identitylink.id_,  <!-- id_ -->
		  aos_wf_hi_identitylink.group_id_,  <!-- group_id_ -->
		  aos_wf_hi_identitylink.type_,  <!-- type_ -->
		  aos_wf_hi_identitylink.user_id_,  <!-- user_id_ -->
		  aos_wf_hi_identitylink.task_id_,  <!-- task_id_ -->
		  aos_wf_hi_identitylink.proc_inst_id_  <!-- proc_inst_id_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="group_id_ != null and group_id_ != ''">
		      AND group_id_ = #{group_id_}  <!-- group_id_ -->
		</if>
	    <if test="type_ != null and type_ != ''">
		      AND type_ = #{type_}  <!-- type_ -->
		</if>
	    <if test="user_id_ != null and user_id_ != ''">
		      AND user_id_ = #{user_id_}  <!-- user_id_ -->
		</if>
	    <if test="task_id_ != null and task_id_ != ''">
		      AND task_id_ = #{task_id_}  <!-- task_id_ -->
		</if>
	    <if test="proc_inst_id_ != null and proc_inst_id_ != ''">
		      AND proc_inst_id_ = #{proc_inst_id_}  <!-- proc_inst_id_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- id_ -->
		</if>
	    <if test="group_id_ != null and group_id_ != ''">
		      AND group_id_ like '%${group_id_}%'  <!-- group_id_ -->
		</if>
	    <if test="type_ != null and type_ != ''">
		      AND type_ like '%${type_}%'  <!-- type_ -->
		</if>
	    <if test="user_id_ != null and user_id_ != ''">
		      AND user_id_ like '%${user_id_}%'  <!-- user_id_ -->
		</if>
	    <if test="task_id_ != null and task_id_ != ''">
		      AND task_id_ like '%${task_id_}%'  <!-- task_id_ -->
		</if>
	    <if test="proc_inst_id_ != null and proc_inst_id_ != ''">
		      AND proc_inst_id_ like '%${proc_inst_id_}%'  <!-- proc_inst_id_ -->
		</if>
	</sql>
	
</mapper>